---
title: "Untitled"
format: html
---

### Analysis of the blood data from the AGILE trial
### analysis is blinded, with treatments named "guinness" and "corona"
```{r}
library(CATALYST)
library(harmony)
library(cowplot)
library(flowCore)
library(scater)
library(SingleCellExperiment)
library(viridis)
library(RColorBrewer)
library(ggforce)
library(ggplot2)
library(ggrepel)
library(ggsci)
library(data.table)
library(emmeans)
library(dplyr)
library(tidyr)
library(ggsignif)
library(rstatix)
library(multcomp)
library(scales)
library(ggthemes)
library(slingshot)
library(ggbeeswarm)
library(ggbreak)
library(DescTools)
library(pak)
library(gghighlight)
library(scattermore)
library(clustree)
library(gridExtra)
library(patchwork)
library(ggbump)
library(stringr)
library(grid)
library(diffcyt)
library(lme4)
library(emmeans)
library(purrr)
```

```{r}
"c:/Users/dan_m/OneDrive - University College London/UCL_Senior_Research_Fellow/AGILE/Blood"
```

## loads in FCS files and create flowset object
### list fcs files in folder, choose ones requied and then run read.flowset
```{r}
fcs <- list.files(pattern = ".fcs$")
fcs
fs <- read.flowSet(fcs, transformation = F, truncate_max_range = F)
```


## setting up flourophore information
### check columns (fluorophores) and remove any not needed
### when running for the first time, save the columns into an excel to form the basis of the fluorophore metadata
### if this has been created before, just load it in
```{r}
all_cols <- colnames(fs)
all_cols
fs <- fs[,-c(1,2,31,35)]
colnames(fs)
cols <- colnames(fs)
cols <- as.data.frame(cols)
#write.csv(cols, file = "Marker.metadata.csv")
markers <- read.csv("Marker.metadata.csv")
markers
```

## setting up sample metadata
### use the file names as the basis for the sample metadata
### first add a column to make the sample id (removes excess characters at end of each fcs file name)
#### more specifically, this drops the last 18 characters (which are the redundant parts of the file name)
### use separate to add individual metadata features - due to "stained_blood" being in the naame, i tell this to become "drop" (because i'll remove it) and "tissue"
## if script run previously then just load it in
```{r}
names <- data.frame(fcs)
sample_df <- names %>% mutate(sample_id = str_sub(fcs, 1, nchar(fcs)-18))
sample_df <- separate(sample_df, col = sample_id, into = c("treatment", "donor", "drop", "tissue", "time"), remove = F, sep = "_")
sample_df <- sample_df[, c(-5)]
#write.csv(sample_df, file = "sample.metadata.csv")
samples <- read.csv("sample.metadata.csv")
samples <- samples[-1]
```

## making the singlecellexperiment object
### double check flourophore and sample_ids match their respective metadata files
### use prepdata to make the sce - here cofactors can be set, which are assessed afterwards
### this step is repeated until final cofactors are decided
```{r}
setdiff(colnames(fs), markers$fluorophore)
setdiff(fcs, samples$fcs)

sce <- prepData(x = fs, panel = markers, md = samples, FACS = T, transform = T, 
  cofactor = c("AF647-A"=1000,"APC-Cy7-A"=2000,"APC-Fire810-A"=1000,"BUV395-A"=1000,"BUV496-A"=2000,"BUV563-A"=700,"BUV737-A"=1000,"BUV805-A"=1000,"BV421-A"=1000,"BV480-A"=2000,"BV605-A"=1000,"BV711-A"=1000,"BV750-A"=1000,"BV785-A"=1000,"FITC-A"=1000,"PE-A"=2000,"PE-Cy5-A"=1000,"PE-Cy7-A"=1000,"PE-Fire810-A"=1000,"R718-A"=1000,"RB545-A"=1000,"RB744-A"=1000,"RB780-A"=1000,"SB645-A"=1000,"SBB580-A"=1000,"SBUV605-A"=1000,"SBV570-A"=1000,"V450-A"=1000,"[RB613]-A"=1000,"[RB705]-A"=1000,"[RY610]-A"=1000), 
  panel_cols = list(channel = "fluorophore", antigen = "antigen"),
  md_cols = list(file = "fcs", id = "sample_id",
  factors = c("donor", "treatment", "tissue", "time")))
```

## downsampling
### there is ~13 million cells, which is far more than necessary and is computationally limiting
### therefore downsampling to 5% of cells, applied to each sample individually
### this function is straight from chatgpt, but seems to work well
```{r}
downsample <- function(sce, sample_col = "sample_id", proportion = 0.05, min_cells = 10) {
  # Get sample labels
  samples <- colData(sce)[[sample_col]]
  
  # For each sample, randomly select proportion of cells
  selected_cells <- unlist(lapply(unique(samples), function(s) {
    cells_in_sample <- which(samples == s)
    n <- max(round(length(cells_in_sample) * proportion), min_cells)  # enforce a minimum
    n <- min(length(cells_in_sample), n)  # avoid oversampling
    sample(cells_in_sample, n)
  }))
  
  # Subset the SCE to those cells
  sce_downsampled <- sce[, selected_cells]
  return(sce_downsampled)
}
numbers_before <- table(sce$sample_id)
sce <- downsample(sce, sample_col = "sample_id", proportion = 0.05)
numbers_after <- table(sce$sample_id)
```
## assess cofactors
### check how many cells in experiment to get an idea of computational load
### assess cofactors - looking for negative peak to be around 0 whilst maintaining a separation from positive peak
### there is a level of subjectivity
```{r}
table(sce$treatment)
plotExprs(sce, color_by = "donor")
```

## Batch correction
### use the harmony package to apply batch correction - using donor as the correction
```{r}
expdata <- sce@assays@data$exprs
meta <- sce@colData$donor
expdata <- t(expdata)
nrow(expdata)
nrow(meta)
harmony_output <- HarmonyMatrix(expdata, meta_data = meta, do_pca = F)
sce@assays@data$uncorrected <- sce@assays@data$exprs
sce@assays@data$exprs <- t(harmony_output)
```
## clustering
## run the clustering and assess elbow plot - this will determine appropriate k number for selecting resolution
```{r}
set.seed(61)
sce <- CATALYST::cluster(sce, features = NULL, xdim = 10, ydim = 10, maxK = 30, verbose = T, seed = 61)

delta <- delta_area(sce)
delta <- delta$data
ggplot(delta, aes(x = k, y = y))+geom_point(size = 5)+geom_line(linewidth = 1.5)+
  theme_classic()+
  theme(axis.text = element_text(colour = "black", size = 18), 
        axis.title = element_text(size = 18, colour = "black"))+
  xlab("K (number of clusters)")+ylab("Relative change in \n area under CDF curve")

```

### create umap
```{r}
sce <- runDR(sce, "UMAP", features = NULL)
```

## save/load here
```{r}
#saveRDS(sce, file = "agile_blood_clustered.rds", compress = F)
sce <- readRDS("agile_blood_clustered.rds")
```

## inspect umap by metadata - this will confirm absence of batch effects and generally view how groups behave
```{r}
variables <- c("donor", "treatment", "time")
umaps <- list()
for (i in variables) {
umaps[[i]] <- plotDR(sce, "UMAP", color_by = i)+theme_bw()+
    geom_scattermore()
} 
p <- plot_grid(umaps$donor, umaps$treatment, umaps$time)
p
```

## if it looks reasonable (i.e doesn't split by donor, suggesting batche effect) start assessing the resolution (also known as meta or k)
### here i use the previously generated delta plot to get an idea of what an appropriate k might be - i then also "over-cluster" on purpose

```{r}
res <- c("meta10", "meta15", "meta20", "meta25")
umaps <- list()

for (i in res) {
umaps[[i]] <- plotDR(sce, "UMAP", color_by = i)+theme_bw()+
    geom_scattermore()
} 

p1 <- plot_grid(umaps$meta10, umaps$meta15, umaps$meta20, umaps$meta25)
p1

ggsave(plot = p1, filename = "umaps_resolution_comparison.png", dpi = 500,
height = 6, width = 16)
```

## i also plot the expression of all markers in the umap. whilst this is computationally intensive and takes a while, it is worth it as it allows us to see if a marker is expressed across clusters or is distinct to one cluster
```{r}
markers.input <- markers$antigen
p2 <- plotDR(sce, color_by = markers.input)+theme_bw()
ggsave(plot = p2, filename = "umap_all_markers.png", dpi = 500,
height = 16, width = 16, bg = "white")
```

## plotting specific k of interest
```{r}
p1 <- plotDR(sce, color_by = "meta20")+theme_bw()
p1
p2 <- plotDR(sce, color_by = "meta20")+facet_wrap(~meta20)+theme_bw()
p2
p3 <- plotExprHeatmap(sce, k = "meta20", by = "cluster_id", bars = TRUE, perc = TRUE)
p3
```

## filtering and annotation
### the main point at this stage is to get some preliminary labels that can be further assessed
### first i also remove tiny clusters that have no expression of a distinct phenotype - likely derbis, doublets or cells that didnt stain properly
### in this case, this is only clusters 8 and 9, which are both < 1% of all cells and lack any distinctive marker expression
```{r}
sce <- filterSCE(sce, k = "meta20", cluster_id %in% c("1", "2", "3", "4", "6", "7","10", "11", "12",
"13", "14", "15", "16", "17", "18", "19", "20"))
merging.table <- data.frame("original" = c(1,2,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20), 
"labels" = c("neutrophil", "neutrophil", "neutrophil", "classical_mono", "neutrophil", "neutrophil", "NK", "CD4+T", "CD4+T", "T", "CD8+T", "non_classical_mono", "classical_mono", "DC", "DC", "CD4+T","CD8+T","B"))

sce <- mergeClusters(sce, k = "meta20", table = merging.table, id = "labels", overwrite = T)

sce$labels <- cluster_ids(sce, k = "labels")
```
## extract data for plotting
### before full annotation, we will briefly assess if treatment/time affect cluster proportions
### add chosen k as a metadata column so that this can be used (add more here if required)
### then we pull out the data and make it into a dataframe, which is then easy to use for plotting
```{r}
sce$k20 <- cluster_ids(sce, "meta20")

ex <- assay(sce, "exprs")
neut.data <- data.frame(t(ex), sample_id = sce$sample_id, donor = sce$donor, 
                        treatment = sce$treatment, time = sce$time, 
                        k20 = sce$k20, labels = sce$labels)
#add umap dimensions
umap.coords <- data.frame(reducedDim(sce, "UMAP"))
neut.data$UMAP_1 <- umap.coords$UMAP1
neut.data$UMAP_2 <- umap.coords$UMAP2
```

## cluster proportions
### a few samples have a 4hr time, these will be called 6h here for analysis sake, but acknowledged throughout
```{r}
neut.data$time_new <- factor(neut.data$time, levels = c("-72h", "0h", "4h", "6h", "24h", "48h", "72h"),
labels = c("-72h", "0h", "6h", "6h", "24h", "48h", "72h"))
proportions <- neut.data %>% group_by(labels, treatment, time_new, donor) %>% dplyr::count(labels, treatment, time_new)
proportions <- pivot_wider(proportions, names_from = labels, values_from = n)
proportions[is.na(proportions)] <- 0
proportions$total = rowSums(proportions[, c(4:12)])
proportions <- pivot_longer(proportions, names_to = "cluster", values_to = "number", 4:12)
proportions$prop <- (proportions$number/proportions$total)*100
p1 <- ggplot(proportions, aes(x = time_new, y = prop, fill = cluster))+geom_col()+theme_bw()+
  facet_wrap(~treatment, scales = "free_x", ncol = 1)+
  theme(axis.text = element_text(size = 12, colour = "black"))+theme(strip.text=element_text(size = 14, colour = "black", face = "bold"))
p1
ggsave(plot=p1, filename = "cluster_proportions_barplot.png", dpi = 500, height = 14, width = 4)

proportions$cluster <- factor(proportions$cluster, levels = c("CD4+T", "CD8+T", "T","classical_mono", "non_classical_mono", "DC", "B", "NK", "neutrophil"))
p2 <- ggplot(proportions, aes(x = time_new, y = prop, colour = treatment, group = treatment)) +
  theme_bw()+
  scale_colour_manual(values=c("mediumseagreen", "darkorchid2"))+
  geom_point(alpha = 0.5, position = position_jitter(width = 0.1), size = 1)+
  stat_summary(fun = median, geom = "point", size = 2.5)+
  stat_summary(fun = median, geom = "line", size = 1)+
  facet_wrap(~cluster, scales = "free_y", ncol = 3)+
  theme(strip.text=element_text(size=12,colour="black",face="bold"))+
  ylab("% of whole blood")+xlab("Time from ecoli injection")
p2
```

## PCA
### can assess if samples cluster seperately based on treatment or time
### here im getting markers into one column, getting their mean across groups of interest and then saving the metadata info in one name and maing these rownames for the matrix
```{r}
#pca at patient level (all clusters)
matrix <- neut.data[, c(1:35)]
matrix <- pivot_longer(matrix, names_to = "marker", values_to = "expression", 1:31)
matrix <- matrix %>% group_by(donor, marker, treatment, time) %>% summarise(mean = mean(expression))
matrix <- pivot_wider(matrix, names_from = "marker", values_from = "mean")
matrix$donor_treatment_time <- paste0(matrix$treatment,"_",matrix$time, "_", matrix$donor)
matrix.names <- matrix$donor_treatment_time
matrix <- matrix[, -c(1:3,35)]
rownames(matrix) <- matrix.names
pca.res <- prcomp(matrix)
data <- as.data.frame(pca.res$x)
data$donor_treatment_time <- rownames(data)
data <- data %>% separate(donor_treatment_time, into = c("treatment", "time", "donor"), sep = "_")
data$time <- factor(data$time, levels = c("-72h", "0h", "4h", "6h", "24h", "48h", "72h"),
labels = c("-72h", "0h", "6h", "6h", "24h", "48h", "72h"))
p1 <- ggplot(data, aes(x = PC1, y = PC2, colour = time, shape = treatment))+geom_point(size = 2)+theme_bw()+
  scale_colour_manual(values = c( "grey50", "black", "indianred2", "darkred", "darkorchid2", "blue"))+
  scale_shape_manual(values = c(19,21))
p1
```

## differential abundance analysis
### uusing the diffcyt package - built for flow data
### before running, need to set up design and contrast matrices
```{r}
sce$group <- paste0(sce$treatment, "_", sce$time)
design <- createDesignMatrix(ei(sce), cols_design = "group")

contrast_minus72h <- createContrast(c(
  "groupcorona_-72h" = 1,
  "groupguinness_-72h" = -1
))

contrast_24h <- rep(0, ncol(design))
names(contrast_24h) <- colnames(design)

contrast_24h["groupcorona_24h"] <- 1
contrast_24h["groupguinness_24h"] <- -1

res <- diffcyt(sce, clustering_to_use = "labels", analysis_type = "DA", method_DA = "diffcyt-DA-edgeR", design=design, contrast = contrast_24h, verbose = TRUE)
tbl_DA <- rowData(res$res)
sce_24h <- sce[, sce$time == "24h"]
plotDiffHeatmap(sce_24h, tbl_DA, all = TRUE, fdr=0.05)
```

## set data up for glmm
```{r}
cluster_counts <- neut.data %>%
  group_by(sample_id,donor, labels, treatment, time_new) %>%
  summarise(cluster_count = n(), .groups = "drop")
total_cells <- neut.data %>%
  group_by(sample_id) %>%
  summarise(total_cells = n(), .groups = "drop")
counts_summary <- cluster_counts %>%
  left_join(total_cells, by = "sample_id")

clusters <- unique(counts_summary$labels)

delta_data <- counts_summary %>%
  group_by(donor, time_new) %>%
  mutate(prop = cluster_count / total_cells) %>%  # Proportion per cluster
  group_by(donor, labels) %>%
  mutate(
    baseline_prop = prop[time_new == "-72h"],  # or "-72h" if that's your baseline
    delta = prop / baseline_prop
  ) %>%
  ungroup()
```
## define function to loop glmm over each cluster
```{r}
analyse_cluster <- function(cluster_name) {
  dat_clust <- delta_data %>% filter(labels == cluster_name)
  
  model <- tryCatch({
    lmer(
      delta ~ treatment * time_new + (1 | donor),
      data = dat_clust
    )
  }, error = function(e) {
    message(paste("Model failed for cluster", cluster_name))
    return(NULL)
  })
  
  if (is.null(model)) return(NULL)
  
  emm <- emmeans(model, ~ treatment | time_new, type = "response")
  contrasts <- contrast(emm, method = "pairwise")
  list(
    cluster = cluster_name,
    model_summary = summary(model),
    emmeans = emm,
    contrasts = contrasts
  )
}
```

## run glmm and get results
```{r}
results_list <- lapply(clusters, analyse_cluster)
names(results_list) <- clusters

# Filter out clusters where model failed (if any)
results_list <- results_list[!sapply(results_list, is.null)]

# Example: access contrasts for the first cluster
print(results_list[[1]]$contrasts)
```


```{r}
# Function to get EMMs + contrasts with p-values for plotting
extract_emm_and_contrasts <- function(cluster_name, results_list) {
  emm_df <- as.data.frame(results_list[[cluster_name]]$emmeans)
  contrasts_df <- as.data.frame(results_list[[cluster_name]]$contrasts)
  
  # Add cluster ID to both
  emm_df$cluster_id <- cluster_name
  contrasts_df$cluster_id <- cluster_name
  
  list(emm = emm_df, contrast = contrasts_df)
}

# Apply to all clusters
emm_contrast_list <- lapply(names(results_list), extract_emm_and_contrasts, results_list = results_list)

# Combine into data frames
emm_all <- bind_rows(lapply(emm_contrast_list, `[[`, "emm"))
contrast_all <- bind_rows(lapply(emm_contrast_list, `[[`, "contrast"))
```
```{r}
# Extract timepoint and treatment comparison from contrast row names
contrast_all <- contrast_all %>%
  mutate(
    sig_label = case_when(
      p.value < 0.001 ~ "***",
      p.value < 0.01 ~ "**",
      p.value < 0.05 ~ "*",
      TRUE ~ ""
    )
  )

max_prob <- emm_all %>%
  group_by(cluster_id) %>%
  summarise(max_y = max(emmean, na.rm = TRUE)) %>%
  mutate(label_y = max_y * 1.1)  # Add 10% buffer

contrast_all <- contrast_all %>%
  left_join(max_prob, by = "cluster_id")
```
```{r}
ggplot(emm_all, aes(x = time_new, y = emmean, colour = treatment, group = treatment)) +
  geom_hline(yintercept = 1, linetype = "dashed", colour = "grey50")+
  geom_line(position = position_dodge(width=0.4)) +
  geom_point(position = position_dodge(width=0.4)) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2,
  position = position_dodge(width=0.4)) +
  geom_text(
    data = contrast_all %>% filter(sig_label != ""),
    aes(x = time_new, y = label_y, label = sig_label),
    inherit.aes = FALSE,
    size = 3
  ) +
  facet_wrap(~cluster_id, scales = "free_y") +
  labs(
    title = "Estimated Cluster Proportions Over Time",
    y = "Estimated Proportion",
    x = "Timepoint",
    colour = "Treatment"
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+scale_colour_manual(values=c("mediumseagreen", "darkorchid2"))
```