---
title: "Untitled"
format: html
---

## Sub-clustering analysis of the AGILE blood data
### this script relies on the "agile_blood_clustered" object from the initial analysis to be loaded in first

```{r}
library(CATALYST)
library(harmony)
library(cowplot)
library(flowCore)
library(scater)
library(SingleCellExperiment)
library(viridis)
library(RColorBrewer)
library(ggforce)
library(ggplot2)
library(ggrepel)
library(ggsci)
library(data.table)
library(emmeans)
library(dplyr)
library(tidyr)
library(ggsignif)
library(rstatix)
library(multcomp)
library(scales)
library(ggthemes)
library(slingshot)
library(ggbeeswarm)
library(ggbreak)
library(DescTools)
library(pak)
library(gghighlight)
library(scattermore)
library(clustree)
library(gridExtra)
library(patchwork)
library(ggbump)
library(stringr)
library(grid)
library(lme4)
library(emmeans)
library(purrr)
library(randomcoloR)
```
```{r}
setwd("c:/Users/dan_m/OneDrive - University College London/UCL_Senior_Research_Fellow/AGILE/Blood")
```

## read in the object and then move to a subclustering folder where object and graphs will be saved
```{r}
sce <- readRDS("agile_blood_annotated.rds")
setwd("c:/Users/dan_m/OneDrive - University College London/UCL_Senior_Research_Fellow/AGILE/Blood/sub_clustering")
```

## the rationale of subclustering is to identify more specific cell subsets
## to perform a meaningful subclustering i will exclude the neutrophils from analysis and cluster again in attempt to pull apart T cell subsets for example
```{r}
sce <- filterSCE(sce, !labels %in% "neutrophil")
```

## run clustering
```{r}
set.seed(61)
sce <- CATALYST::cluster(sce, features = NULL, xdim = 10, ydim = 10, maxK = 30, verbose = T, seed = 61)

delta <- delta_area(sce)
delta <- delta$data
ggplot(delta, aes(x = k, y = y))+geom_point(size = 5)+geom_line(linewidth = 1.5)+
  theme_classic()+
  theme(axis.text = element_text(colour = "black", size = 18), 
        axis.title = element_text(size = 18, colour = "black"))+
  xlab("K (number of clusters)")+ylab("Relative change in \n area under CDF curve")
```

## create umap
```{r}
sce <- runDR(sce, "UMAP", features = NULL)
```

## inspect the umaps based on metadata and then clustering resolution
### this code is all the same as the initial clustering script so has been put into one code chunk for brevity
```{r}
variables <- c("donor", "treatment", "time")
umaps <- list()
for (i in variables) {
umaps[[i]] <- plotDR(sce, "UMAP", color_by = i)+theme_bw()+
    geom_scattermore()
} 
p1 <- plot_grid(umaps$donor, umaps$treatment, umaps$time)
p1

res <- c("meta10", "meta12", "meta15", "meta20")
umaps <- list()

for (i in res) {
umaps[[i]] <- plotDR(sce, "UMAP", color_by = i)+theme_bw()+
    geom_scattermore()
} 

p2 <- plot_grid(umaps$meta10, umaps$meta12, umaps$meta15, umaps$meta20)
p2

ggsave(plot = p2, filename = "umaps_resolution_comparison.png", dpi = 500,
height = 6, width = 16)
```

## i also plot the expression of all markers in the umap. whilst this is computationally intensive and takes a while, it is worth it as it allows us to see if a marker is expressed across clusters or is distinct to one cluster
```{r}
markers.input <- rownames(sce)
p2 <- plotDR(sce, color_by = markers.input)+theme_bw()
ggsave(plot = p2, filename = "umap_all_markers.png", dpi = 500,
height = 16, width = 16, bg = "white")
```

## plotting specific k of interest
```{r}
p1 <- plotDR(sce, color_by = "meta20")+theme_bw()
p1
p2 <- plotDR(sce, color_by = "meta20")+facet_wrap(~meta20)+theme_bw()
p2
p3 <- plotExprHeatmap(sce, k = "meta20", by = "cluster_id", bars = TRUE, perc = TRUE)
p3
```