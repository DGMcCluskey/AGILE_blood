---
title: "Untitled"
format: html
---

## Sub-clustering analysis of the AGILE blood data
### this script relies on the "agile_blood_clustered" object from the initial analysis to be loaded in first

```{r}
library(CATALYST)
library(harmony)
library(cowplot)
library(flowCore)
library(scater)
library(SingleCellExperiment)
library(viridis)
library(RColorBrewer)
library(ggforce)
library(ggplot2)
library(ggrepel)
library(ggsci)
library(data.table)
library(emmeans)
library(dplyr)
library(tidyr)
library(ggsignif)
library(rstatix)
library(multcomp)
library(scales)
library(ggthemes)
library(slingshot)
library(ggbeeswarm)
library(ggbreak)
library(DescTools)
library(pak)
library(gghighlight)
library(scattermore)
library(clustree)
library(gridExtra)
library(patchwork)
library(ggbump)
library(stringr)
library(grid)
library(lme4)
library(emmeans)
library(purrr)
library(randomcoloR)
```
```{r}
setwd("c:/Users/dan_m/OneDrive - University College London/UCL_Senior_Research_Fellow/AGILE/Blood")
```

## read in the object and then move to a subclustering folder where object and graphs will be saved
```{r}
sce <- readRDS("agile_blood_annotated.rds")
setwd("c:/Users/dan_m/OneDrive - University College London/UCL_Senior_Research_Fellow/AGILE/Blood/sub_clustering")
```

## the rationale of subclustering is to identify more specific cell subsets
## to perform a meaningful subclustering i will exclude the neutrophils from analysis and cluster again in attempt to pull apart T cell subsets for example
```{r}
sce <- filterSCE(sce, !labels %in% "neutrophil")
```

## run clustering
```{r}
set.seed(61)
sce <- CATALYST::cluster(sce, features = NULL, xdim = 10, ydim = 10, maxK = 30, verbose = T, seed = 61)

delta <- delta_area(sce)
delta <- delta$data
ggplot(delta, aes(x = k, y = y))+geom_point(size = 5)+geom_line(linewidth = 1.5)+
  theme_classic()+
  theme(axis.text = element_text(colour = "black", size = 18), 
        axis.title = element_text(size = 18, colour = "black"))+
  xlab("K (number of clusters)")+ylab("Relative change in \n area under CDF curve")
```

## create umap
```{r}
sce <- runDR(sce, "UMAP", features = NULL)
#saveRDS(sce, file= "agile_blood_subclustered.rds", compress = F)
```

```{r}
sce <- readRDS("agile_blood_subclustered.rds")
```
## inspect the umaps based on metadata and then clustering resolution
### this code is all the same as the initial clustering script so has been put into one code chunk for brevity
```{r}
variables <- c("donor", "treatment", "time")
umaps <- list()
for (i in variables) {
umaps[[i]] <- plotDR(sce, "UMAP", color_by = i)+theme_bw()+
    geom_scattermore()
} 
p1 <- plot_grid(umaps$donor, umaps$treatment, umaps$time)
p1

res <- c("meta10", "meta12", "meta15", "meta20")
umaps <- list()

for (i in res) {
umaps[[i]] <- plotDR(sce, "UMAP", color_by = i)+theme_bw()+
    geom_scattermore()
} 

p2 <- plot_grid(umaps$meta10, umaps$meta12, umaps$meta15, umaps$meta20)
p2

ggsave(plot = p2, filename = "umaps_resolution_comparison.png", dpi = 500,
height = 6, width = 16)
```

## i also plot the expression of all markers in the umap. whilst this is computationally intensive and takes a while, it is worth it as it allows us to see if a marker is expressed across clusters or is distinct to one cluster
```{r}
markers.input <- rownames(sce)
p2 <- plotDR(sce, color_by = markers.input)+theme_bw()
ggsave(plot = p2, filename = "umap_all_markers.png", dpi = 500,
height = 16, width = 16, bg = "white")
```

## plotting specific k of interest in multiple ways to QC clusters
```{r}
p1 <- plotDR(sce, color_by = "meta20")+theme_bw()
p1
p2 <- plotDR(sce, color_by = "meta20")+facet_wrap(~meta20)+theme_bw()
p2

p3 <- plotAbundances(sce, k = "meta20", by = "cluster_id", group_by="donor")
p3

p4 <- plotExprHeatmap(sce, k = "meta20", by = "cluster_id", bars = TRUE, perc = TRUE)
p4

combo <- p1+theme(legend.position="none")+p2+p3+theme(legend.position="none")+plot_layout(ncol=3)
ggsave(combo, filename="subclustering_qc.png", dpi=500, height=10, width = 20)
```

## filtering
### there a number of tiny clusters (below 1% of cells, even with neuts removed), suggesting they may be called as a cluster due to high expression of only one marker
### most of these tiny clusters are also spatially spread throughout the plot
### i'm confident these are cells that have picked up multiple antibodies, have abnormal expression and are not meaningful
### i will filter out these clusters
## made an exception for cluster 10, as this has reasoable foxp3, so might be a (sverely underrepresented) treg population
```{r}
sce <- filterSCE(sce, k = "meta20", cluster_id %in% c("1", "3", "5", "6", "9", "10", "11",
"14", "16", "17", "19"))
```

## annotation
### make a heatmap again with final clusters, to best visualise marker split
```{r}
p1 <- plotDR(sce, color_by = "meta20")+theme_bw()
p1
p2 <- plotExprHeatmap(sce, k = "meta20", by = "cluster_id", bars = TRUE, perc = TRUE)
p2
```

### make and apply the labels
```{r}
merging.table <- data.frame("original" = c(1,3,5,6,9,10,11,14,16,17,19), 
"labels" = c("CD4+T", "Memory CD8+T", "Naive CD8+T", "T", "DC", "Treg", "Non_classical_mono", "NK", "Intermediate_mono", "Classical_mono", "B"))

sce <- mergeClusters(sce, k = "meta20", table = merging.table, id = "labels", overwrite = T)

sce$labels <- cluster_ids(sce, k = "labels")
```

## save annotated object
```{r}
saveRDS(sce, file="agile_blood_subclustered_annotated.rds", compress=F)
sce <- readRDS("agile_blood_subclustered_annotated.rds")
```

## extract data for plotting
### dataframe is more versatile than the singlecellexperiment
```{r}
sce$k20 <- cluster_ids(sce, "meta20")

ex <- assay(sce, "exprs")
neut.data <- data.frame(t(ex), sample_id = sce$sample_id, donor = sce$donor, 
                        treatment = sce$treatment, time = sce$time, 
                        k20 = sce$k20, labels = sce$labels)
#add umap dimensions
umap.coords <- data.frame(reducedDim(sce, "UMAP"))
neut.data$UMAP_1 <- umap.coords$UMAP1
neut.data$UMAP_2 <- umap.coords$UMAP2
neut.data$labels <- factor(neut.data$labels, levels =c("CD4+T", "Treg", "Naive CD8+T", "Memory CD8+T", "T", "NK", "B",
"Classical_mono", "Intermediate_mono", "Non_classical_mono", "DC", "neutrophil"))
```

## annotated umaps
```{r}
cluster_palette <- c("seagreen3", "darkgreen", "indianred2", "red", "darkred", "darkorchid2", "orange",
  "steelblue2", "blue", "cyan4", "cyan1")
label_data <- neut.data %>%
  group_by(labels) %>%
  summarise(UMAP_1 = median(UMAP_1), UMAP_2 = median(UMAP_2), .groups = "drop")

plot1 <-ggplot(neut.data, aes(x=UMAP_1,y=UMAP_2,colour=labels))+geom_scattermore()+
  theme_half_open()+
  scale_colour_manual(values = cluster_palette)+
    geom_label_repel(data=label_data, aes(label=labels, fill = labels), colour = "white",
    size = 5, fontface = "bold", label.size = 1)+
    scale_fill_manual(values = cluster_palette)+
    theme(legend.position = "none")
plot1

plot2 <- ggplot(neut.data, aes(x=UMAP_1,y=UMAP_2,colour=treatment))+geom_scattermore()+
  theme_half_open()+
  scale_colour_manual(values = c("mediumseagreen", "darkorchid2"))+
  theme(
    legend.position = "right",
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 14)
  )

plot3 <- ggplot(neut.data, aes(x=UMAP_1,y=UMAP_2,colour=time))+geom_scattermore()+
  theme_half_open()+
  scale_colour_manual(values = c("black", "grey50", "darkred", "red", "darkorchid2", "steelblue2", "blue"))+
  theme(
    legend.position = "right",
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 14)
  )+guides(colour=guide_legend(ncol=2))

random_palette <- distinctColorPalette(18)
plot4 <- ggplot(neut.data, aes(x=UMAP_1,y=UMAP_2,colour=donor))+geom_scattermore()+
  theme_half_open()+
  scale_colour_manual(values=random_palette)+
  theme(
    legend.position = "right",
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 10)
  )+guides(colour=guide_legend(ncol=2))

combo <- plot1 + (plot2 / plot3 / plot4)+plot_layout(, ncol = 2,widths = c(3, 1))
combo
ggsave(plot=combo,filename="annotated_umaps.png", dpi=500,height=10,width=18,bg="white")
```

## heatmap and violin plots to accompany annotated umap
## easiest way to do this is to generate a heatmap through catalysts' own function and then extract and plot this with pheatmap
### note the subsetting of the "hm" - this is me choosing the markers for the hetamp (e.g. dont need neut markers, or markers that dont distinguish populations)
```{r}
markers <- rownames(sce)
hm <- plotExprHeatmap(sce, features = markers, 
by = "cluster_id", k = "labels", bars = T, perc = T, scale = "last")

hm <- hm@matrix
hm <- hm[, c(4,5,6,7,10,16,19,21,22,24,26,30)]
hm2 <- pheatmap::pheatmap(hm, scale = "none", color = rev(hcl.colors(100, "RdYlBu")), border_color = "black",cluster_cols = T, cluster_rows = T, treeheight_col = 0, treeheight_row=10, cellheight = 20, cellwidth = 20)

ggsave(plot=hm2,filename="key_marker_heatmap.png", dpi=500,height=5,width=8,bg="white")

marker_df <- neut.data[, c(3,4,5,6,10,15,16,19,21,22,24,26,30,37)]
marker_df <- pivot_longer(marker_df, names_to = "marker", values_to = "expression", cols = 1:13)

p.violin <- ggplot(marker_df, aes(x = labels, y = expression, fill = labels))+geom_violin(scale = "width", trim = T)+
  facet_grid(rows = vars(marker), scales = "free", switch = "y")+theme_cowplot()+
  scale_y_continuous(expand = c(0, 0), position="right", labels = function(x)
    c(rep(x = "", times = length(x)-2), x[length(x) - 1], ""))+
  theme(legend.position = "none", panel.spacing = unit(0, "lines"),
        plot.title = element_text(hjust = 0.5),
        panel.background = element_rect(fill = NA, color = "black"),
        strip.background = element_blank(),
        strip.text = element_text(face = "bold"),
        strip.text.y.left = element_text(angle = 0, size = 14))+
  theme(axis.text.x = element_text(size = 14, colour = "black", angle = 45, hjust = 1))+
  xlab(NULL)+
  scale_fill_manual(values=cluster_palette)
p.violin
ggsave(plot=p.violin, filename = "violin_expression.png", dpi = 500,
height = 14, width = 6, bg = "white")
```